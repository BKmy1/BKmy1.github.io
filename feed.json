{
    "version": "https://jsonfeed.org/version/1",
    "title": "计算机Web应用开发全栈",
    "subtitle": "我们因为无知而读书，而我们读书让我们更加地觉得自己的无知",
    "icon": "http://myblog.com/images/favicon.ico",
    "description": "欢迎来到我的空间，在这里你能读到我个人读书笔记",
    "home_page_url": "http://myblog.com",
    "items": [
        {
            "id": "http://myblog.com/2022/01/30/lastest-%E6%B5%8B%E8%AF%95/",
            "url": "http://myblog.com/2022/01/30/lastest-%E6%B5%8B%E8%AF%95/",
            "title": "lastest 测试",
            "date_published": "2022-01-30T08:40:00.000Z",
            "content_html": "<h1 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"图片测试\"><a class=\"anchor\" href=\"#图片测试\">#</a> 图片测试</h2>\n<p><img data-src=\"/images/pasted-0.png\" alt=\"filename already exists, renamed\" /></p>\n<h3 id=\"样式测试\"><a class=\"anchor\" href=\"#样式测试\">#</a> 样式测试</h3>\n<p><span class=\"red\">Hello World</span></p>\n",
            "tags": [
                "计算机科学",
                "Java"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/30/util/idea/test/",
            "url": "http://myblog.com/2022/01/30/util/idea/test/",
            "title": "idea工具 测试",
            "date_published": "2022-01-30T07:00:50.582Z",
            "content_html": "<h1 id=\"idea开发\"><a class=\"anchor\" href=\"#idea开发\">#</a> idea 开发</h1>\n<blockquote>\n<p>可以多人共同协作开发多个项目</p>\n</blockquote>\n<h1 id=\"优势\"><a class=\"anchor\" href=\"#优势\">#</a> 优势</h1>\n<ul>\n<li>简单，明了</li>\n</ul>\n",
            "tags": [
                "开发工具",
                "idea"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/30/util/android-studio/test/",
            "url": "http://myblog.com/2022/01/30/util/android-studio/test/",
            "title": "android studio 测试",
            "date_published": "2022-01-30T06:58:03.226Z",
            "content_html": "<h1 id=\"android-studio\"><a class=\"anchor\" href=\"#android-studio\">#</a> android studio</h1>\n<blockquote>\n<p>可以开发移动端 app</p>\n</blockquote>\n<h1 id=\"使用教程\"><a class=\"anchor\" href=\"#使用教程\">#</a> 使用教程</h1>\n<ul>\n<li>慢慢来</li>\n</ul>\n",
            "tags": [
                "开发工具",
                "android studio"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/30/computer-science/Vue/test/",
            "url": "http://myblog.com/2022/01/30/computer-science/Vue/test/",
            "title": "Vue 测试",
            "date_published": "2022-01-30T06:56:14.961Z",
            "content_html": "<p>const vm = new Vue({<br />\nel: 'root',<br />\ndata: {</p>\n<pre><code>&#125;,\nmethods: &#123;\n    \n&#125;,\ncomputed: &#123;\n    \n&#125;,\nwatch: &#123;\n    \n&#125;\n</code></pre>\n<p>})</p>\n",
            "tags": [
                "计算机科学",
                "Vue"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/30/computer-science/JavaScript/test/",
            "url": "http://myblog.com/2022/01/30/computer-science/JavaScript/test/",
            "title": "JS 测试",
            "date_published": "2022-01-30T06:54:39.881Z",
            "content_html": "<p name:张三,age:20=\"\">let a = 10<br />\nconst p =</p>\n",
            "tags": [
                "计算机科学",
                "JavaScript"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/30/computer-science/C++/test/",
            "url": "http://myblog.com/2022/01/30/computer-science/C++/test/",
            "title": "C++ 测试",
            "date_published": "2022-01-30T06:52:24.716Z",
            "content_html": "<p>cin &gt;&gt; a &gt;&gt; b;<br />\ncout &lt;&lt; a &lt;&lt; b &lt;&lt; endl;</p>\n",
            "tags": [
                "计算机科学",
                "C++"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/30/book-essay/article/test/",
            "url": "http://myblog.com/2022/01/30/book-essay/article/test/",
            "title": "《理想国》",
            "date_published": "2022-01-30T06:34:00.183Z",
            "content_html": "<p>起源于 2018 年进入 b 站，关注罗翔老师后，</p>\n",
            "tags": [
                "读书笔记",
                "article"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/30/book-essay/poem/test/",
            "url": "http://myblog.com/2022/01/30/book-essay/poem/test/",
            "title": "千里香",
            "date_published": "2022-01-30T02:43:30.379Z",
            "content_html": "<blockquote>\n<p>家乡的乡火气，是大城市所不具有的。</p>\n</blockquote>\n",
            "tags": [
                "读书笔记",
                "poem"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/23/algorithm/acwing/test/",
            "url": "http://myblog.com/2022/01/23/algorithm/acwing/test/",
            "title": "算法测试",
            "date_published": "2022-01-23T01:57:22.726Z",
            "content_html": "<h2 id=\"java\"><a class=\"anchor\" href=\"#java\">#</a> Java</h2>\n<ul>\n<li>\n<p>从工程管理角度，软件设计一般分为两步完成，它们是</p>\n<ul>\n<li>概要设计与详细设计</li>\n</ul>\n</li>\n<li>\n<p>下列选项中不属于软件生命周期<strong>开发</strong>阶段任务的是</p>\n<ul>\n<li>软件维护</li>\n</ul>\n</li>\n<li>\n<p>在数据库系统中，用户所见的数据模式为</p>\n<ul>\n<li>外模式</li>\n</ul>\n</li>\n<li>\n<p>数据库设计的四个阶段是：需求分析、概念设计、逻辑设计和</p>\n<ul>\n<li>物理设计</li>\n</ul>\n</li>\n<li>\n<p>一个算法的空间复杂度大，则其时间复杂度也必定大</p>\n</li>\n<li>\n<p>在长度为 64 的有序线性表中进行顺序查找，最坏情况下需要比较的次数为</p>\n<ul>\n<li>64</li>\n</ul>\n</li>\n<li>\n<p>数据库技术的根本目标是要解决数据的</p>\n<ul>\n<li>共享问题</li>\n</ul>\n</li>\n<li>\n<p>在编译 Java 程序时，用于指定生成.class 文件位置的选项是</p>\n<ul>\n<li>- d</li>\n</ul>\n</li>\n<li>\n<p>Java Applet 程序的.class 文件不可以用 java 命令运行</p>\n</li>\n<li>\n<p>因多线程并发执行而引起的执行顺序的不确定性可能造成执行结果的不确定</p>\n</li>\n<li>\n<p>处理对象传输的接口是</p>\n<ul>\n<li>Serializable</li>\n</ul>\n</li>\n<li>\n<p>在读取二进制数据文件的记录时，为了提高效率常常使用一种辅助类</p>\n<ul>\n<li>stringbuffer</li>\n</ul>\n</li>\n<li>\n<p>可以使当前同级线程重新获得运行机会的方法是</p>\n<ul>\n<li>yield()</li>\n</ul>\n</li>\n<li>\n<p>applet  init -&gt; start -&gt; stop -&gt; destroy -&gt;paint</p>\n</li>\n<li>\n<p>通常情况下，Applet 可以读取系统信息</p>\n</li>\n<li>\n<p>提供 showDocument () 方法，使 Applet 能够请求浏览器访问特定 URL 的类是</p>\n<ul>\n<li>appletContext</li>\n</ul>\n</li>\n</ul>\n<p>下列软件系统结构图的宽度为，计算宽度，即从上往下计算出各层中结点数的最大值，3</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224113103009.png\" alt=\"image-20211224113103009\" /></p>\n<p>debug 的任务是诊断和改正程序中的错误。</p>\n<p>一个关系表的行称为元组，列称为字段，也称为域</p>\n<p>在 Java 中，3.14156D 表示的是 双精度浮点 数。</p>\n<p>Java 不直接支持多继承，但可以通过 接口 实现多继承。</p>\n<p>e.printStackTrace();</p>\n<p>在 java.io 包中有某个类同时实现了 DataInput 接口和 DataOutput 接口，这个类</p>\n<p>是<a href=\"../../java/io/RandomAccessFile.html\"> RandomAccessFile</a></p>\n<p>在 Java 程序中，主线程一般具有 普通或 5 优先级。</p>\n<p>当实现 Runnable 接口时，要实现的方法是 【14】 。run 方法</p>\n<p>mouseDragged () 方法是 MouseMotionListener 接口中的抽象方法，该方法的参数</p>\n<p>是 mouseEvent 类。</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224195424446.png\" alt=\"image-20211224195424446\" /></p>\n<blockquote>\n<p>有 x 元素   栈顶 top = m +1</p>\n<p>入栈   top = top - 1</p>\n<p>出栈  top = top + 1</p>\n<p>栈空 x=0 ,top = m + 1</p>\n<p>栈满 x = m , top = 1</p>\n<p>top = m - x + 1</p>\n<p>x = m - top + 1</p>\n</blockquote>\n<p>带链队列空时，头指针和尾指针都为 NULL; 队列中只有一个元素时，头指针和尾指针都指向这个元素。</p>\n<p>当 front (头部) = rear (尾部)  队列满</p>\n<p>一棵树度 3  共 27 个节点，  度为 3，2，0   结点数 4，1，10</p>\n<p>其中度为 1 的结点数为</p>\n<blockquote>\n<p>有 n 个   树中的结点数 = 树中所有结点的度之和 + 1</p>\n<p>3x4+2x1+0x10+1+nx1=27</p>\n</blockquote>\n<p>下列算法中均以比较作为基本运算，则平均情况与最坏情况下的时间复杂度相同的是</p>\n<blockquote>\n<p>在链式存储中的有序表中进行查找</p>\n</blockquote>\n<p>按照传统的数据模型分类，数据库系统可分为</p>\n<blockquote>\n<p>层次、网状、关系</p>\n</blockquote>\n<p>Java 语言的特点有：简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性、解释性等。<br />\n<strong>但不包含抽象这一特点，</strong></p>\n<p>Java 命名的约定一：命名名称只能包含：字母、数字和下划线，其中不能用数字作为名称第一个字符。<br />\n选项 B 错误。<br />\nJava 命名的约定二：驼峰命名法。<br />\n即第一个字符小写，其后单词首字母大写。</p>\n<p>Java 关键字有：abstract、assert、boolean、break、byte、case、catch、char、class、const、continue、default、do、double、else 、enum、extends、final、finally、float、for、goto、if、implements、import、instanceof、int、interface、long、native、new、package、private、protected、public、return 、strictfp、short、static、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while。</p>\n<p>类 Car 中的 toString () 直接继承于类 Object，输出 test.toString () 是对象的 hash 值</p>\n<p>下列选项中不是 WindowListener 接口提供的方法是<strong> WindowDragged</strong></p>\n<p>windowClosed、windowDeactivated、windowActivated、windowIconified、windowDeiconified、windowOpened、windowClosing。</p>\n<p>Swing 采用了一种 MVC 的设计范式<strong> MVC 即 Modet - View - Controller, 是模型视图控制器的缩写，模型层用来保存内容，视图层用来展示，控制层用来控制事物。</strong></p>\n<p>如果要让线程进入可运行状态，可以调用的方法是：start () 方法为进入可运行状态；run () 为运行时状态；sleep () 为休眠状态；wait () 为线程等待状态。</p>\n<p>深度为 5 的完全二叉树的结点数不可能是</p>\n<blockquote>\n<p>设完全二叉树的结点数为 n, 根据深度为 k 的二叉树至多有 2 k - 1 个结点，再根据完全二叉树的定义可知，2 k - 1 - 1 &lt; n≤2 k - 1。<br />\n本题中完全二叉树的深度为 5, 则 2 5 - 1 - 1 &lt; n≤2 5 - 1, 15 &lt; n≤31。<br />\n因此，结点数不能为 15。</p>\n<p>结点数为 n 深度为 i 的完全二叉树结点数范围是 2^（i-1）- 1 到 2^i-1 个（左开右闭区间）。</p>\n<p>2 的 i-1 次方  &lt; n &lt;= 2 的 i 次方 - 1</p>\n</blockquote>\n<p><strong>支撑软件是介于系统软件和应用软件之间</strong>，协助用户开发的工具性软件，包括辅助和支持开发和维护应用软件的工具软件，如需求分析软件，设计工具软件，编码工具软件，测试工具软件，维护工具软件等，也包括辅助管理人员控制开发进程和项目管理的工具软件，如计划进度管理工具软件，过程控制工具软件，质量管理及配置管理工具软件等。<br />\nIOS 系统、数据库管理系统属于系统软件，财务管理系统属于应用软件，Studio.NET 属于支撑软件。</p>\n<p><strong>程序调试的任务是设计和运行测试用例</strong></p>\n<p><strong>关系数据模型的三个组成部分：关系的数据结构 (用二维表表示), 关系操纵 (查询、删除、插入、修改), 关系的数据约束 (实体完整性约束、参照完整性约束、用户定义的完整性约束)。</strong></p>\n<p><strong>关系模式进行规范化的目的是使关系结构更加合理，消除存储异常，使数据冗余尽量小，便于插入、删除和更新等操作。</strong></p>\n<p>编译 java 代码是把 java 文件编译为 class 文件，由编译器完成，jvm 执行的是 class 文件，执行需要加载，校验，执行</p>\n<p><strong>! 是逻辑非，|| 是逻辑或，&amp;&amp; 是逻辑与！= 是关系运算符不等于</strong></p>\n<p>若有语句 Class c0 = Class.forName (&quot;java.util.Date&quot;), 可得到类 Date 的修饰符的方法是</p>\n<blockquote>\n<p>A) c0.getModifiers ()// 获得属性的修饰符，例如 public, static 等</p>\n<p>B) c0.getSuperclass ()// 获取父类的 Class 对象</p>\n<p>C) c0.getMethod ()// 获取 Class 对象的方法：D) c0.getDeclaredMethods ()// 返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认 (包) 访问和私有方法，但不包括继承的方法。</p>\n</blockquote>\n<p><strong>所有异常的父类均可以为 Exception</strong></p>\n<p>A) Serializable Serializable 接口是启用其序列化功能的接口。</p>\n<p>B) ObjectInput ObjectInput 扩展 DataInput 接口以包含对象的读操作。<br />\nDataInput 包括基本类型的输入方法；<br />\nObjectInput 扩展了 该接口，以包含对象、数组和 String 的输出方法。</p>\n<p>C) DataInputStream 数据输入流属于 Java 类</p>\n<p>D) FilenameFilter FilenameFilter 是文件名过滤器，用来过滤不符合规格的 文件名，并返回合格的文件；</p>\n<p><strong>File 类是 java.io 包中的非流类，它以系统无关的方式描述文件对象的属性。</strong><br />\n<strong>File 类只操作文件在磁盘上的属性，而读写文件内容的功能则需要流类提供。</strong></p>\n<p>Java 中所有事件对象的基类是 <strong>java.util.EventObject</strong></p>\n<p>在顺序表中查找，最好情况下第一个元素就是要查找的元素，则比较次数为 1; 在最坏情况下，最后一个元素才是要找的元素，则比较次数为 n。<br />\n则平均比较次数：(1 + 2+┉+n) /n = (n (n + 1) / 2) /n = (n + 1) / 2。</p>\n<p>软件测试的准则如下：</p>\n<ul>\n<li>\n<p>①所有测试都应追溯到需求。</p>\n</li>\n<li>\n<p>②严格执行测试计划，排除测试的随意性。</p>\n</li>\n<li>\n<p>③充分注意测试中的群集现象。</p>\n</li>\n<li>\n<p>④程序员应避免检查自己的程序。</p>\n</li>\n<li>\n<p>⑤穷举测试不可能。</p>\n</li>\n<li>\n<p>⑥妥善保存测试计划、测试用例、出错统计和最终分析报告，为维护提供方便。</p>\n</li>\n</ul>\n<blockquote>\n<p>软件测试是保证软件质量的重要手段 &lt;font color=&quot;red&quot;&gt;(错误)&lt;/font&gt;</p>\n</blockquote>\n<p><strong>数据库系统在其内部分为三级模式及两级映射，三级模式即概念模式、内模式和外模式。</strong></p>\n<p><strong>概念模式 (逻辑模式) 是数据库系统中全局数据逻辑结构的描述，是全体用户公共数据视图。</strong></p>\n<p><strong>外模式也称子模式或者用户模式，是用户的数据视图，</strong> 也就是用户所能够看见和使用的局部数据的逻辑结构和特征的描述，是与某一应用有关的数据的逻辑表示。</p>\n<p><strong>内模式又称物理模式，是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。</strong></p>\n<p><strong>关系数据库中的关系是要满足一定要求的，满足不同程度要求的为不同的范式。</strong><br />\n<strong>满足最低要求的叫第一范式，简称 1NF。</strong></p>\n<p>当方法遇到异常又不知如何处理时，正确的做法是 <strong>声明抛出异常</strong></p>\n<p><strong>FlowLayout 是 Panel 和 Applet 的默认布局管理器。</strong><br />\n<strong>构件在容器中的放置规律是从上到下、从左到右进行。</strong><br />\n<strong>BorderLayout 是 Window、Frame 和 Dialog 默认布局管理器。</strong><br />\n<strong>BorderLayout 布局管理器把容器分成 5 个区域：North、South、East、West 和 Center, 每个区域只能放置一个构件。</strong></p>\n<p><strong>实现 Runnable, 线程代码存在接口的子类的 run 方法。线程开始是调用 start () 方法，</strong></p>\n<p><strong>Applet 运行时，首先由浏览器调用 init () 方法，通知该 Applet 已经被加载到浏览器中，使 Applet 执行一些基本的初始化。main () 方法不是必须的，可以没有，Applet 可以正常编译和运行。</strong></p>\n<p><strong>算法设计不仅要考虑计算结果的正确性，还要考虑算法的时间复杂度和空间复杂度。</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224213931939.png\" alt=\"image-20211224213931939\" /></p>\n<p><strong>在栈中，通常用指针 top 来指示栈顶的位置，用指针 bottom 指向栈底。<br />\n栈顶指针 top 动态反应了栈中元素的变化情况。<br />\n在循环队列中，队头指针和队尾指针的动态变化决定队列的长度。<br />\n链式存储结构中，各数据结点的存储序号是不连续的，并且各结点在存储空间中的位置关系与逻辑关系也不一致，故头指针和尾指针或栈顶指针无法决定链表长度。</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224214240697.png\" alt=\"image-20211224214240697\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224214352048.png\" alt=\"image-20211224214352048\" /></p>\n<p><strong>设树的结点数为 m, 度为 3 的结点数为 n, 则度为 1 的结点数为 m - n - 5, 根据树中的结点数 = 树中所有结点的度之和 + 1, 得 3×n + 1×(m - n - 5) + 5×0 + 1 = m, 则 n = 2。</strong></p>\n<blockquote>\n<p>m   n  m-n-5   m = 3xn+1x(m-n-5)+5x0+1</p>\n</blockquote>\n<p>堆的定义： <strong>n 个元素的序列 (h1, h2, …hn), 当且仅当 hi≤h2i 且 hi≤h2i + 1 时为小顶堆，当且仅当 hi≥h2i 且 hi≥h2i + 1 时为大顶堆</strong>。</p>\n<p><strong>软件设计阶段产生的文档有概要设计说明书、详细设计说明书和测试计划初稿；数据流程图、数据字典和需求规格说明书是需求分析阶段产生的；软件确认测试计划属于软件测试阶段的文档。</strong></p>\n<p>不可以作为类中成员方法的修饰符的是<strong> const</strong></p>\n<p>&amp;&amp; 具有短路作用，当第一个判断条件结果为 false 就会终止判断。</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224223704669.png\" alt=\"image-20211224223704669\" /></p>\n<p>3 3</p>\n<p>若希望一个类不能有子类，那么在定义这个类时使用关键字<strong> final</strong></p>\n<p><strong>System.out 输出流、System.in 输入流、System.err 错误输出流</strong></p>\n<p><strong>线程实现通常有两种方法：一种是继承 Thread 类，另一种是实现 Runnable 接口。</strong></p>\n<p>一、extends Thread ,    Test3</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224225049378.png\" alt=\"image-20211224225049378\" /></p>\n<p>二、</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224225226184.png\" alt=\"image-20211224225226184\" /></p>\n<p><strong>private, synchronized</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224225033487.png\" alt=\"image-20211224225033487\" /></p>\n<p><strong>对类进行并发控制，需用私有属性来进行定义变量，用锁将方法锁起来，这样就不会出现并发出现异常情况</strong></p>\n<p><strong>Applet 可以显示 Swing 组件，Applet 的主类可以定义为 Applet 类或 JApplet 类的子类，Applet 支持多线程。</strong></p>\n",
            "tags": [
                "算法基础",
                "acwing"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/23/computer-network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90/",
            "url": "http://myblog.com/2022/01/23/computer-network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90/",
            "title": "计算机系统组成",
            "date_published": "2022-01-23T01:52:07.932Z",
            "content_html": "<h1 id=\"操作系统\"><a class=\"anchor\" href=\"#操作系统\">#</a> 操作系统</h1>\n<p><strong>第一章、</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211230202016102.png\" alt=\"image-20211230202016102\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211230202118632.png\" alt=\"image-20211230202118632\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211230202432412.png\" alt=\"image-20211230202432412\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211230203350935.png\" alt=\"image-20211230203350935\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211230203601108.png\" alt=\"image-20211230203601108\" /></p>\n<h2 id=\"4-进程同步练习\"><a class=\"anchor\" href=\"#4-进程同步练习\">#</a> 4、进程同步练习</h2>\n<ul>\n<li>\n<p>如果 3 个进程共享一个互斥段，每次最多可以允许 2 个进程进入互斥段，则信号量的变化范围是 <strong>2、1、0、-1</strong></p>\n</li>\n<li>\n<p>在对记录型信号量的 P 操作的定义中，当信号量的值<strong>小于 0</strong> 时，执行 P 操作的进程变为阻塞状态。</p>\n</li>\n<li>\n<p>若记录型信号量 S 的初值是 3，则当前值为 1 时表示有<strong> 0 个</strong>阻塞等待进程。</p>\n</li>\n<li>\n<p>设与某资源相关联的信号量初值为 3，当前值为 1，若 M 表示该资源的可用个数，N 表示等待资源的进程数，则 M、N 分别是<strong> 1、0</strong></p>\n</li>\n<li>\n<p>两个旅行社甲和乙为旅客到某航空公司订飞机票，形成互斥资源的是<strong>数据</strong></p>\n</li>\n<li>\n<p>从下面对临界区的论述中，选出一条正确的论述。<strong>临界区是指进程中访问临界资源的那段代码</strong>。</p>\n</li>\n<li>\n<p>进程 A 和 B 共享同一临界资源，并且进程 A 正处于对应的临界区内执行。请从下列描述中选择正确的描述。<strong>进程 A 的执行能被中断，而且只要 B 进程就绪，就可以将 CPU 调度给 B 进程。</strong></p>\n</li>\n<li>\n<p>若记录型信号量 S 的初值为 15，当前值为 - 15，则表示有<strong> 15</strong> 个等待进程。</p>\n</li>\n<li>\n<p>在 9 个生产者，5 个消费者，共享容量为 7 的缓冲区的生产者 - 消费者问题中。互斥使用缓冲区的信号量 S 的初值为<strong> 1</strong></p>\n</li>\n<li>\n<p>进程并发地在处理机上执行时，<strong>进程之间可能具有交往，也可能无关</strong></p>\n</li>\n<li>\n<p>在操作系统中，P、V 操作是一种<strong>进程低级通信原语。</strong></p>\n</li>\n<li>\n<p>记录型信号量在使用过程中存在” 忙等 “现象。<strong>对</strong></p>\n</li>\n<li>\n<p>进程的前趋图中的各个结点之间存在同步关系，也存在互斥关系。<strong>对</strong></p>\n</li>\n<li>\n<p>管程是进程的一部分，控制进程的同步与运行。<strong>对</strong></p>\n</li>\n<li>\n<p>对临界资源，应采用互斥访问方式来实现共享。<strong>错</strong></p>\n</li>\n<li>\n<p>临界区是指进程中用于实现进程互斥的那段代码。<strong>对</strong></p>\n</li>\n<li>\n<p>经典的读者 - 写者问题只有进程互斥，不存在进程同步。<strong>错</strong></p>\n</li>\n<li>\n<p>使用 P、V 操作后，可以防止系统出现死锁。<strong>错</strong></p>\n</li>\n<li>\n<p>在利用信号量实现进程互斥时，应将<strong>临界区</strong>置于<strong> P 操作</strong>和<strong> V 操作</strong>之间</p>\n</li>\n<li>\n<p>15 个进程共享同一程序段，而每次最多允许 4 个进程进入该程序段，若用 P、V 操作同步机制，则记录型信号量 S 的取值范围为 **-11 到 4**</p>\n</li>\n<li>\n<p>对每个进程中访问<strong>共享资源</strong>的那段代码称为临界区</p>\n</li>\n<li>\n<p>计算机系统中，一次仅允许一个进程使用的资源，称为<strong>临界资源</strong></p>\n</li>\n</ul>\n",
            "tags": [
                "计算机网络",
                "计算机系统组成"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/08/computer-science/Android/Android/",
            "url": "http://myblog.com/2022/01/08/computer-science/Android/Android/",
            "title": "Android使用",
            "date_published": "2022-01-08T11:57:41.538Z",
            "content_html": "<h2 id=\"android\"><a class=\"anchor\" href=\"#android\">#</a> Android</h2>\n<p>1. 在 Activity 中使用以下 Java 代码显示 xml 文件中布局的内容</p>\n<p>setContentView(R.layout.activity_main);</p>\n<p>2.Framelayout</p>\n<p>3.Java 代码实现 ui</p>\n<p>4. 使用 Java 代码和 xml 共同实现 ui</p>\n",
            "tags": [
                "计算机科学",
                "Android"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/08/algorithm/leetCode/test/",
            "url": "http://myblog.com/2022/01/08/algorithm/leetCode/test/",
            "title": "算法测试",
            "date_published": "2022-01-08T11:48:55.007Z",
            "content_html": "<h2 id=\"java\"><a class=\"anchor\" href=\"#java\">#</a> Java</h2>\n<ul>\n<li>\n<p>从工程管理角度，软件设计一般分为两步完成，它们是</p>\n<ul>\n<li>概要设计与详细设计</li>\n</ul>\n</li>\n<li>\n<p>下列选项中不属于软件生命周期<strong>开发</strong>阶段任务的是</p>\n<ul>\n<li>软件维护</li>\n</ul>\n</li>\n<li>\n<p>在数据库系统中，用户所见的数据模式为</p>\n<ul>\n<li>外模式</li>\n</ul>\n</li>\n<li>\n<p>数据库设计的四个阶段是：需求分析、概念设计、逻辑设计和</p>\n<ul>\n<li>物理设计</li>\n</ul>\n</li>\n<li>\n<p>一个算法的空间复杂度大，则其时间复杂度也必定大</p>\n</li>\n<li>\n<p>在长度为 64 的有序线性表中进行顺序查找，最坏情况下需要比较的次数为</p>\n<ul>\n<li>64</li>\n</ul>\n</li>\n<li>\n<p>数据库技术的根本目标是要解决数据的</p>\n<ul>\n<li>共享问题</li>\n</ul>\n</li>\n<li>\n<p>在编译 Java 程序时，用于指定生成.class 文件位置的选项是</p>\n<ul>\n<li>- d</li>\n</ul>\n</li>\n<li>\n<p>Java Applet 程序的.class 文件不可以用 java 命令运行</p>\n</li>\n<li>\n<p>因多线程并发执行而引起的执行顺序的不确定性可能造成执行结果的不确定</p>\n</li>\n<li>\n<p>处理对象传输的接口是</p>\n<ul>\n<li>Serializable</li>\n</ul>\n</li>\n<li>\n<p>在读取二进制数据文件的记录时，为了提高效率常常使用一种辅助类</p>\n<ul>\n<li>stringbuffer</li>\n</ul>\n</li>\n<li>\n<p>可以使当前同级线程重新获得运行机会的方法是</p>\n<ul>\n<li>yield()</li>\n</ul>\n</li>\n<li>\n<p>applet  init -&gt; start -&gt; stop -&gt; destroy -&gt;paint</p>\n</li>\n<li>\n<p>通常情况下，Applet 可以读取系统信息</p>\n</li>\n<li>\n<p>提供 showDocument () 方法，使 Applet 能够请求浏览器访问特定 URL 的类是</p>\n<ul>\n<li>appletContext</li>\n</ul>\n</li>\n</ul>\n<p>下列软件系统结构图的宽度为，计算宽度，即从上往下计算出各层中结点数的最大值，3</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224113103009.png\" alt=\"image-20211224113103009\" /></p>\n<p>debug 的任务是诊断和改正程序中的错误。</p>\n<p>一个关系表的行称为元组，列称为字段，也称为域</p>\n<p>在 Java 中，3.14156D 表示的是 双精度浮点 数。</p>\n<p>Java 不直接支持多继承，但可以通过 接口 实现多继承。</p>\n<p>e.printStackTrace();</p>\n<p>在 java.io 包中有某个类同时实现了 DataInput 接口和 DataOutput 接口，这个类</p>\n<p>是<a href=\"../../java/io/RandomAccessFile.html\"> RandomAccessFile</a></p>\n<p>在 Java 程序中，主线程一般具有 普通或 5 优先级。</p>\n<p>当实现 Runnable 接口时，要实现的方法是 【14】 。run 方法</p>\n<p>mouseDragged () 方法是 MouseMotionListener 接口中的抽象方法，该方法的参数</p>\n<p>是 mouseEvent 类。</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224195424446.png\" alt=\"image-20211224195424446\" /></p>\n<blockquote>\n<p>有 x 元素   栈顶 top = m +1</p>\n<p>入栈   top = top - 1</p>\n<p>出栈  top = top + 1</p>\n<p>栈空 x=0 ,top = m + 1</p>\n<p>栈满 x = m , top = 1</p>\n<p>top = m - x + 1</p>\n<p>x = m - top + 1</p>\n</blockquote>\n<p>带链队列空时，头指针和尾指针都为 NULL; 队列中只有一个元素时，头指针和尾指针都指向这个元素。</p>\n<p>当 front (头部) = rear (尾部)  队列满</p>\n<p>一棵树度 3  共 27 个节点，  度为 3，2，0   结点数 4，1，10</p>\n<p>其中度为 1 的结点数为</p>\n<blockquote>\n<p>有 n 个   树中的结点数 = 树中所有结点的度之和 + 1</p>\n<p>3x4+2x1+0x10+1+nx1=27</p>\n</blockquote>\n<p>下列算法中均以比较作为基本运算，则平均情况与最坏情况下的时间复杂度相同的是</p>\n<blockquote>\n<p>在链式存储中的有序表中进行查找</p>\n</blockquote>\n<p>按照传统的数据模型分类，数据库系统可分为</p>\n<blockquote>\n<p>层次、网状、关系</p>\n</blockquote>\n<p>Java 语言的特点有：简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性、解释性等。<br />\n<strong>但不包含抽象这一特点，</strong></p>\n<p>Java 命名的约定一：命名名称只能包含：字母、数字和下划线，其中不能用数字作为名称第一个字符。<br />\n选项 B 错误。<br />\nJava 命名的约定二：驼峰命名法。<br />\n即第一个字符小写，其后单词首字母大写。</p>\n<p>Java 关键字有：abstract、assert、boolean、break、byte、case、catch、char、class、const、continue、default、do、double、else 、enum、extends、final、finally、float、for、goto、if、implements、import、instanceof、int、interface、long、native、new、package、private、protected、public、return 、strictfp、short、static、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while。</p>\n<p>类 Car 中的 toString () 直接继承于类 Object，输出 test.toString () 是对象的 hash 值</p>\n<p>下列选项中不是 WindowListener 接口提供的方法是<strong> WindowDragged</strong></p>\n<p>windowClosed、windowDeactivated、windowActivated、windowIconified、windowDeiconified、windowOpened、windowClosing。</p>\n<p>Swing 采用了一种 MVC 的设计范式<strong> MVC 即 Modet - View - Controller, 是模型视图控制器的缩写，模型层用来保存内容，视图层用来展示，控制层用来控制事物。</strong></p>\n<p>如果要让线程进入可运行状态，可以调用的方法是：start () 方法为进入可运行状态；run () 为运行时状态；sleep () 为休眠状态；wait () 为线程等待状态。</p>\n<p>深度为 5 的完全二叉树的结点数不可能是</p>\n<blockquote>\n<p>设完全二叉树的结点数为 n, 根据深度为 k 的二叉树至多有 2 k - 1 个结点，再根据完全二叉树的定义可知，2 k - 1 - 1 &lt; n≤2 k - 1。<br />\n本题中完全二叉树的深度为 5, 则 2 5 - 1 - 1 &lt; n≤2 5 - 1, 15 &lt; n≤31。<br />\n因此，结点数不能为 15。</p>\n<p>结点数为 n 深度为 i 的完全二叉树结点数范围是 2^（i-1）- 1 到 2^i-1 个（左开右闭区间）。</p>\n<p>2 的 i-1 次方  &lt; n &lt;= 2 的 i 次方 - 1</p>\n</blockquote>\n<p><strong>支撑软件是介于系统软件和应用软件之间</strong>，协助用户开发的工具性软件，包括辅助和支持开发和维护应用软件的工具软件，如需求分析软件，设计工具软件，编码工具软件，测试工具软件，维护工具软件等，也包括辅助管理人员控制开发进程和项目管理的工具软件，如计划进度管理工具软件，过程控制工具软件，质量管理及配置管理工具软件等。<br />\nIOS 系统、数据库管理系统属于系统软件，财务管理系统属于应用软件，Studio.NET 属于支撑软件。</p>\n<p><strong>程序调试的任务是设计和运行测试用例</strong></p>\n<p><strong>关系数据模型的三个组成部分：关系的数据结构 (用二维表表示), 关系操纵 (查询、删除、插入、修改), 关系的数据约束 (实体完整性约束、参照完整性约束、用户定义的完整性约束)。</strong></p>\n<p><strong>关系模式进行规范化的目的是使关系结构更加合理，消除存储异常，使数据冗余尽量小，便于插入、删除和更新等操作。</strong></p>\n<p>编译 java 代码是把 java 文件编译为 class 文件，由编译器完成，jvm 执行的是 class 文件，执行需要加载，校验，执行</p>\n<p><strong>! 是逻辑非，|| 是逻辑或，&amp;&amp; 是逻辑与！= 是关系运算符不等于</strong></p>\n<p>若有语句 Class c0 = Class.forName (&quot;java.util.Date&quot;), 可得到类 Date 的修饰符的方法是</p>\n<blockquote>\n<p>A) c0.getModifiers ()// 获得属性的修饰符，例如 public, static 等</p>\n<p>B) c0.getSuperclass ()// 获取父类的 Class 对象</p>\n<p>C) c0.getMethod ()// 获取 Class 对象的方法：D) c0.getDeclaredMethods ()// 返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认 (包) 访问和私有方法，但不包括继承的方法。</p>\n</blockquote>\n<p><strong>所有异常的父类均可以为 Exception</strong></p>\n<p>A) Serializable Serializable 接口是启用其序列化功能的接口。</p>\n<p>B) ObjectInput ObjectInput 扩展 DataInput 接口以包含对象的读操作。<br />\nDataInput 包括基本类型的输入方法；<br />\nObjectInput 扩展了 该接口，以包含对象、数组和 String 的输出方法。</p>\n<p>C) DataInputStream 数据输入流属于 Java 类</p>\n<p>D) FilenameFilter FilenameFilter 是文件名过滤器，用来过滤不符合规格的 文件名，并返回合格的文件；</p>\n<p><strong>File 类是 java.io 包中的非流类，它以系统无关的方式描述文件对象的属性。</strong><br />\n<strong>File 类只操作文件在磁盘上的属性，而读写文件内容的功能则需要流类提供。</strong></p>\n<p>Java 中所有事件对象的基类是 <strong>java.util.EventObject</strong></p>\n<p>在顺序表中查找，最好情况下第一个元素就是要查找的元素，则比较次数为 1; 在最坏情况下，最后一个元素才是要找的元素，则比较次数为 n。<br />\n则平均比较次数：(1 + 2+┉+n) /n = (n (n + 1) / 2) /n = (n + 1) / 2。</p>\n<p>软件测试的准则如下：</p>\n<ul>\n<li>\n<p>①所有测试都应追溯到需求。</p>\n</li>\n<li>\n<p>②严格执行测试计划，排除测试的随意性。</p>\n</li>\n<li>\n<p>③充分注意测试中的群集现象。</p>\n</li>\n<li>\n<p>④程序员应避免检查自己的程序。</p>\n</li>\n<li>\n<p>⑤穷举测试不可能。</p>\n</li>\n<li>\n<p>⑥妥善保存测试计划、测试用例、出错统计和最终分析报告，为维护提供方便。</p>\n</li>\n</ul>\n<blockquote>\n<p>软件测试是保证软件质量的重要手段 &lt;font color=&quot;red&quot;&gt;(错误)&lt;/font&gt;</p>\n</blockquote>\n<p><strong>数据库系统在其内部分为三级模式及两级映射，三级模式即概念模式、内模式和外模式。</strong></p>\n<p><strong>概念模式 (逻辑模式) 是数据库系统中全局数据逻辑结构的描述，是全体用户公共数据视图。</strong></p>\n<p><strong>外模式也称子模式或者用户模式，是用户的数据视图，</strong> 也就是用户所能够看见和使用的局部数据的逻辑结构和特征的描述，是与某一应用有关的数据的逻辑表示。</p>\n<p><strong>内模式又称物理模式，是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。</strong></p>\n<p><strong>关系数据库中的关系是要满足一定要求的，满足不同程度要求的为不同的范式。</strong><br />\n<strong>满足最低要求的叫第一范式，简称 1NF。</strong></p>\n<p>当方法遇到异常又不知如何处理时，正确的做法是 <strong>声明抛出异常</strong></p>\n<p><strong>FlowLayout 是 Panel 和 Applet 的默认布局管理器。</strong><br />\n<strong>构件在容器中的放置规律是从上到下、从左到右进行。</strong><br />\n<strong>BorderLayout 是 Window、Frame 和 Dialog 默认布局管理器。</strong><br />\n<strong>BorderLayout 布局管理器把容器分成 5 个区域：North、South、East、West 和 Center, 每个区域只能放置一个构件。</strong></p>\n<p><strong>实现 Runnable, 线程代码存在接口的子类的 run 方法。线程开始是调用 start () 方法，</strong></p>\n<p><strong>Applet 运行时，首先由浏览器调用 init () 方法，通知该 Applet 已经被加载到浏览器中，使 Applet 执行一些基本的初始化。main () 方法不是必须的，可以没有，Applet 可以正常编译和运行。</strong></p>\n<p><strong>算法设计不仅要考虑计算结果的正确性，还要考虑算法的时间复杂度和空间复杂度。</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224213931939.png\" alt=\"image-20211224213931939\" /></p>\n<p><strong>在栈中，通常用指针 top 来指示栈顶的位置，用指针 bottom 指向栈底。<br />\n栈顶指针 top 动态反应了栈中元素的变化情况。<br />\n在循环队列中，队头指针和队尾指针的动态变化决定队列的长度。<br />\n链式存储结构中，各数据结点的存储序号是不连续的，并且各结点在存储空间中的位置关系与逻辑关系也不一致，故头指针和尾指针或栈顶指针无法决定链表长度。</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224214240697.png\" alt=\"image-20211224214240697\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224214352048.png\" alt=\"image-20211224214352048\" /></p>\n<p><strong>设树的结点数为 m, 度为 3 的结点数为 n, 则度为 1 的结点数为 m - n - 5, 根据树中的结点数 = 树中所有结点的度之和 + 1, 得 3×n + 1×(m - n - 5) + 5×0 + 1 = m, 则 n = 2。</strong></p>\n<blockquote>\n<p>m   n  m-n-5   m = 3xn+1x(m-n-5)+5x0+1</p>\n</blockquote>\n<p>堆的定义： <strong>n 个元素的序列 (h1, h2, …hn), 当且仅当 hi≤h2i 且 hi≤h2i + 1 时为小顶堆，当且仅当 hi≥h2i 且 hi≥h2i + 1 时为大顶堆</strong>。</p>\n<p><strong>软件设计阶段产生的文档有概要设计说明书、详细设计说明书和测试计划初稿；数据流程图、数据字典和需求规格说明书是需求分析阶段产生的；软件确认测试计划属于软件测试阶段的文档。</strong></p>\n<p>不可以作为类中成员方法的修饰符的是<strong> const</strong></p>\n<p>&amp;&amp; 具有短路作用，当第一个判断条件结果为 false 就会终止判断。</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224223704669.png\" alt=\"image-20211224223704669\" /></p>\n<p>3 3</p>\n<p>若希望一个类不能有子类，那么在定义这个类时使用关键字<strong> final</strong></p>\n<p><strong>System.out 输出流、System.in 输入流、System.err 错误输出流</strong></p>\n<p><strong>线程实现通常有两种方法：一种是继承 Thread 类，另一种是实现 Runnable 接口。</strong></p>\n<p>一、extends Thread ,    Test3</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224225049378.png\" alt=\"image-20211224225049378\" /></p>\n<p>二、</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224225226184.png\" alt=\"image-20211224225226184\" /></p>\n<p><strong>private, synchronized</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224225033487.png\" alt=\"image-20211224225033487\" /></p>\n<p><strong>对类进行并发控制，需用私有属性来进行定义变量，用锁将方法锁起来，这样就不会出现并发出现异常情况</strong></p>\n<p><strong>Applet 可以显示 Swing 组件，Applet 的主类可以定义为 Applet 类或 JApplet 类的子类，Applet 支持多线程。</strong></p>\n",
            "tags": [
                "算法基础",
                "leetCode"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/08/computer-science/Python/test/",
            "url": "http://myblog.com/2022/01/08/computer-science/Python/test/",
            "title": "Python测试",
            "date_published": "2022-01-08T11:48:42.228Z",
            "content_html": "<h2 id=\"java\"><a class=\"anchor\" href=\"#java\">#</a> Java</h2>\n<ul>\n<li>\n<p>从工程管理角度，软件设计一般分为两步完成，它们是</p>\n<ul>\n<li>概要设计与详细设计</li>\n</ul>\n</li>\n<li>\n<p>下列选项中不属于软件生命周期<strong>开发</strong>阶段任务的是</p>\n<ul>\n<li>软件维护</li>\n</ul>\n</li>\n<li>\n<p>在数据库系统中，用户所见的数据模式为</p>\n<ul>\n<li>外模式</li>\n</ul>\n</li>\n<li>\n<p>数据库设计的四个阶段是：需求分析、概念设计、逻辑设计和</p>\n<ul>\n<li>物理设计</li>\n</ul>\n</li>\n<li>\n<p>一个算法的空间复杂度大，则其时间复杂度也必定大</p>\n</li>\n<li>\n<p>在长度为 64 的有序线性表中进行顺序查找，最坏情况下需要比较的次数为</p>\n<ul>\n<li>64</li>\n</ul>\n</li>\n<li>\n<p>数据库技术的根本目标是要解决数据的</p>\n<ul>\n<li>共享问题</li>\n</ul>\n</li>\n<li>\n<p>在编译 Java 程序时，用于指定生成.class 文件位置的选项是</p>\n<ul>\n<li>- d</li>\n</ul>\n</li>\n<li>\n<p>Java Applet 程序的.class 文件不可以用 java 命令运行</p>\n</li>\n<li>\n<p>因多线程并发执行而引起的执行顺序的不确定性可能造成执行结果的不确定</p>\n</li>\n<li>\n<p>处理对象传输的接口是</p>\n<ul>\n<li>Serializable</li>\n</ul>\n</li>\n<li>\n<p>在读取二进制数据文件的记录时，为了提高效率常常使用一种辅助类</p>\n<ul>\n<li>stringbuffer</li>\n</ul>\n</li>\n<li>\n<p>可以使当前同级线程重新获得运行机会的方法是</p>\n<ul>\n<li>yield()</li>\n</ul>\n</li>\n<li>\n<p>applet  init -&gt; start -&gt; stop -&gt; destroy -&gt;paint</p>\n</li>\n<li>\n<p>通常情况下，Applet 可以读取系统信息</p>\n</li>\n<li>\n<p>提供 showDocument () 方法，使 Applet 能够请求浏览器访问特定 URL 的类是</p>\n<ul>\n<li>appletContext</li>\n</ul>\n</li>\n</ul>\n<p>下列软件系统结构图的宽度为，计算宽度，即从上往下计算出各层中结点数的最大值，3</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224113103009.png\" alt=\"image-20211224113103009\" /></p>\n<p>debug 的任务是诊断和改正程序中的错误。</p>\n<p>一个关系表的行称为元组，列称为字段，也称为域</p>\n<p>在 Java 中，3.14156D 表示的是 双精度浮点 数。</p>\n<p>Java 不直接支持多继承，但可以通过 接口 实现多继承。</p>\n<p>e.printStackTrace();</p>\n<p>在 java.io 包中有某个类同时实现了 DataInput 接口和 DataOutput 接口，这个类</p>\n<p>是<a href=\"../../java/io/RandomAccessFile.html\"> RandomAccessFile</a></p>\n<p>在 Java 程序中，主线程一般具有 普通或 5 优先级。</p>\n<p>当实现 Runnable 接口时，要实现的方法是 【14】 。run 方法</p>\n<p>mouseDragged () 方法是 MouseMotionListener 接口中的抽象方法，该方法的参数</p>\n<p>是 mouseEvent 类。</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224195424446.png\" alt=\"image-20211224195424446\" /></p>\n<blockquote>\n<p>有 x 元素   栈顶 top = m +1</p>\n<p>入栈   top = top - 1</p>\n<p>出栈  top = top + 1</p>\n<p>栈空 x=0 ,top = m + 1</p>\n<p>栈满 x = m , top = 1</p>\n<p>top = m - x + 1</p>\n<p>x = m - top + 1</p>\n</blockquote>\n<p>带链队列空时，头指针和尾指针都为 NULL; 队列中只有一个元素时，头指针和尾指针都指向这个元素。</p>\n<p>当 front (头部) = rear (尾部)  队列满</p>\n<p>一棵树度 3  共 27 个节点，  度为 3，2，0   结点数 4，1，10</p>\n<p>其中度为 1 的结点数为</p>\n<blockquote>\n<p>有 n 个   树中的结点数 = 树中所有结点的度之和 + 1</p>\n<p>3x4+2x1+0x10+1+nx1=27</p>\n</blockquote>\n<p>下列算法中均以比较作为基本运算，则平均情况与最坏情况下的时间复杂度相同的是</p>\n<blockquote>\n<p>在链式存储中的有序表中进行查找</p>\n</blockquote>\n<p>按照传统的数据模型分类，数据库系统可分为</p>\n<blockquote>\n<p>层次、网状、关系</p>\n</blockquote>\n<p>Java 语言的特点有：简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性、解释性等。<br />\n<strong>但不包含抽象这一特点，</strong></p>\n<p>Java 命名的约定一：命名名称只能包含：字母、数字和下划线，其中不能用数字作为名称第一个字符。<br />\n选项 B 错误。<br />\nJava 命名的约定二：驼峰命名法。<br />\n即第一个字符小写，其后单词首字母大写。</p>\n<p>Java 关键字有：abstract、assert、boolean、break、byte、case、catch、char、class、const、continue、default、do、double、else 、enum、extends、final、finally、float、for、goto、if、implements、import、instanceof、int、interface、long、native、new、package、private、protected、public、return 、strictfp、short、static、super、switch、synchronized、this、throw、throws、transient、try、void、volatile、while。</p>\n<p>类 Car 中的 toString () 直接继承于类 Object，输出 test.toString () 是对象的 hash 值</p>\n<p>下列选项中不是 WindowListener 接口提供的方法是<strong> WindowDragged</strong></p>\n<p>windowClosed、windowDeactivated、windowActivated、windowIconified、windowDeiconified、windowOpened、windowClosing。</p>\n<p>Swing 采用了一种 MVC 的设计范式<strong> MVC 即 Modet - View - Controller, 是模型视图控制器的缩写，模型层用来保存内容，视图层用来展示，控制层用来控制事物。</strong></p>\n<p>如果要让线程进入可运行状态，可以调用的方法是：start () 方法为进入可运行状态；run () 为运行时状态；sleep () 为休眠状态；wait () 为线程等待状态。</p>\n<p>深度为 5 的完全二叉树的结点数不可能是</p>\n<blockquote>\n<p>设完全二叉树的结点数为 n, 根据深度为 k 的二叉树至多有 2 k - 1 个结点，再根据完全二叉树的定义可知，2 k - 1 - 1 &lt; n≤2 k - 1。<br />\n本题中完全二叉树的深度为 5, 则 2 5 - 1 - 1 &lt; n≤2 5 - 1, 15 &lt; n≤31。<br />\n因此，结点数不能为 15。</p>\n<p>结点数为 n 深度为 i 的完全二叉树结点数范围是 2^（i-1）- 1 到 2^i-1 个（左开右闭区间）。</p>\n<p>2 的 i-1 次方  &lt; n &lt;= 2 的 i 次方 - 1</p>\n</blockquote>\n<p><strong>支撑软件是介于系统软件和应用软件之间</strong>，协助用户开发的工具性软件，包括辅助和支持开发和维护应用软件的工具软件，如需求分析软件，设计工具软件，编码工具软件，测试工具软件，维护工具软件等，也包括辅助管理人员控制开发进程和项目管理的工具软件，如计划进度管理工具软件，过程控制工具软件，质量管理及配置管理工具软件等。<br />\nIOS 系统、数据库管理系统属于系统软件，财务管理系统属于应用软件，Studio.NET 属于支撑软件。</p>\n<p><strong>程序调试的任务是设计和运行测试用例</strong></p>\n<p><strong>关系数据模型的三个组成部分：关系的数据结构 (用二维表表示), 关系操纵 (查询、删除、插入、修改), 关系的数据约束 (实体完整性约束、参照完整性约束、用户定义的完整性约束)。</strong></p>\n<p><strong>关系模式进行规范化的目的是使关系结构更加合理，消除存储异常，使数据冗余尽量小，便于插入、删除和更新等操作。</strong></p>\n<p>编译 java 代码是把 java 文件编译为 class 文件，由编译器完成，jvm 执行的是 class 文件，执行需要加载，校验，执行</p>\n<p><strong>! 是逻辑非，|| 是逻辑或，&amp;&amp; 是逻辑与！= 是关系运算符不等于</strong></p>\n<p>若有语句 Class c0 = Class.forName (&quot;java.util.Date&quot;), 可得到类 Date 的修饰符的方法是</p>\n<blockquote>\n<p>A) c0.getModifiers ()// 获得属性的修饰符，例如 public, static 等</p>\n<p>B) c0.getSuperclass ()// 获取父类的 Class 对象</p>\n<p>C) c0.getMethod ()// 获取 Class 对象的方法：D) c0.getDeclaredMethods ()// 返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认 (包) 访问和私有方法，但不包括继承的方法。</p>\n</blockquote>\n<p><strong>所有异常的父类均可以为 Exception</strong></p>\n<p>A) Serializable Serializable 接口是启用其序列化功能的接口。</p>\n<p>B) ObjectInput ObjectInput 扩展 DataInput 接口以包含对象的读操作。<br />\nDataInput 包括基本类型的输入方法；<br />\nObjectInput 扩展了 该接口，以包含对象、数组和 String 的输出方法。</p>\n<p>C) DataInputStream 数据输入流属于 Java 类</p>\n<p>D) FilenameFilter FilenameFilter 是文件名过滤器，用来过滤不符合规格的 文件名，并返回合格的文件；</p>\n<p><strong>File 类是 java.io 包中的非流类，它以系统无关的方式描述文件对象的属性。</strong><br />\n<strong>File 类只操作文件在磁盘上的属性，而读写文件内容的功能则需要流类提供。</strong></p>\n<p>Java 中所有事件对象的基类是 <strong>java.util.EventObject</strong></p>\n<p>在顺序表中查找，最好情况下第一个元素就是要查找的元素，则比较次数为 1; 在最坏情况下，最后一个元素才是要找的元素，则比较次数为 n。<br />\n则平均比较次数：(1 + 2+┉+n) /n = (n (n + 1) / 2) /n = (n + 1) / 2。</p>\n<p>软件测试的准则如下：</p>\n<ul>\n<li>\n<p>①所有测试都应追溯到需求。</p>\n</li>\n<li>\n<p>②严格执行测试计划，排除测试的随意性。</p>\n</li>\n<li>\n<p>③充分注意测试中的群集现象。</p>\n</li>\n<li>\n<p>④程序员应避免检查自己的程序。</p>\n</li>\n<li>\n<p>⑤穷举测试不可能。</p>\n</li>\n<li>\n<p>⑥妥善保存测试计划、测试用例、出错统计和最终分析报告，为维护提供方便。</p>\n</li>\n</ul>\n<blockquote>\n<p>软件测试是保证软件质量的重要手段 &lt;font color=&quot;red&quot;&gt;(错误)&lt;/font&gt;</p>\n</blockquote>\n<p><strong>数据库系统在其内部分为三级模式及两级映射，三级模式即概念模式、内模式和外模式。</strong></p>\n<p><strong>概念模式 (逻辑模式) 是数据库系统中全局数据逻辑结构的描述，是全体用户公共数据视图。</strong></p>\n<p><strong>外模式也称子模式或者用户模式，是用户的数据视图，</strong> 也就是用户所能够看见和使用的局部数据的逻辑结构和特征的描述，是与某一应用有关的数据的逻辑表示。</p>\n<p><strong>内模式又称物理模式，是数据物理结构和存储方式的描述，是数据在数据库内部的表示方式。</strong></p>\n<p><strong>关系数据库中的关系是要满足一定要求的，满足不同程度要求的为不同的范式。</strong><br />\n<strong>满足最低要求的叫第一范式，简称 1NF。</strong></p>\n<p>当方法遇到异常又不知如何处理时，正确的做法是 <strong>声明抛出异常</strong></p>\n<p><strong>FlowLayout 是 Panel 和 Applet 的默认布局管理器。</strong><br />\n<strong>构件在容器中的放置规律是从上到下、从左到右进行。</strong><br />\n<strong>BorderLayout 是 Window、Frame 和 Dialog 默认布局管理器。</strong><br />\n<strong>BorderLayout 布局管理器把容器分成 5 个区域：North、South、East、West 和 Center, 每个区域只能放置一个构件。</strong></p>\n<p><strong>实现 Runnable, 线程代码存在接口的子类的 run 方法。线程开始是调用 start () 方法，</strong></p>\n<p><strong>Applet 运行时，首先由浏览器调用 init () 方法，通知该 Applet 已经被加载到浏览器中，使 Applet 执行一些基本的初始化。main () 方法不是必须的，可以没有，Applet 可以正常编译和运行。</strong></p>\n<p><strong>算法设计不仅要考虑计算结果的正确性，还要考虑算法的时间复杂度和空间复杂度。</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224213931939.png\" alt=\"image-20211224213931939\" /></p>\n<p><strong>在栈中，通常用指针 top 来指示栈顶的位置，用指针 bottom 指向栈底。<br />\n栈顶指针 top 动态反应了栈中元素的变化情况。<br />\n在循环队列中，队头指针和队尾指针的动态变化决定队列的长度。<br />\n链式存储结构中，各数据结点的存储序号是不连续的，并且各结点在存储空间中的位置关系与逻辑关系也不一致，故头指针和尾指针或栈顶指针无法决定链表长度。</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224214240697.png\" alt=\"image-20211224214240697\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224214352048.png\" alt=\"image-20211224214352048\" /></p>\n<p><strong>设树的结点数为 m, 度为 3 的结点数为 n, 则度为 1 的结点数为 m - n - 5, 根据树中的结点数 = 树中所有结点的度之和 + 1, 得 3×n + 1×(m - n - 5) + 5×0 + 1 = m, 则 n = 2。</strong></p>\n<blockquote>\n<p>m   n  m-n-5   m = 3xn+1x(m-n-5)+5x0+1</p>\n</blockquote>\n<p>堆的定义： <strong>n 个元素的序列 (h1, h2, …hn), 当且仅当 hi≤h2i 且 hi≤h2i + 1 时为小顶堆，当且仅当 hi≥h2i 且 hi≥h2i + 1 时为大顶堆</strong>。</p>\n<p><strong>软件设计阶段产生的文档有概要设计说明书、详细设计说明书和测试计划初稿；数据流程图、数据字典和需求规格说明书是需求分析阶段产生的；软件确认测试计划属于软件测试阶段的文档。</strong></p>\n<p>不可以作为类中成员方法的修饰符的是<strong> const</strong></p>\n<p>&amp;&amp; 具有短路作用，当第一个判断条件结果为 false 就会终止判断。</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224223704669.png\" alt=\"image-20211224223704669\" /></p>\n<p>3 3</p>\n<p>若希望一个类不能有子类，那么在定义这个类时使用关键字<strong> final</strong></p>\n<p><strong>System.out 输出流、System.in 输入流、System.err 错误输出流</strong></p>\n<p><strong>线程实现通常有两种方法：一种是继承 Thread 类，另一种是实现 Runnable 接口。</strong></p>\n<p>一、extends Thread ,    Test3</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224225049378.png\" alt=\"image-20211224225049378\" /></p>\n<p>二、</p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224225226184.png\" alt=\"image-20211224225226184\" /></p>\n<p><strong>private, synchronized</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211224225033487.png\" alt=\"image-20211224225033487\" /></p>\n<p><strong>对类进行并发控制，需用私有属性来进行定义变量，用锁将方法锁起来，这样就不会出现并发出现异常情况</strong></p>\n<p><strong>Applet 可以显示 Swing 组件，Applet 的主类可以定义为 Applet 类或 JApplet 类的子类，Applet 支持多线程。</strong></p>\n",
            "tags": [
                "计算机科学",
                "Python"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/08/computer-science/Java/%E7%BB%83%E4%B9%A0%E4%B8%80/",
            "url": "http://myblog.com/2022/01/08/computer-science/Java/%E7%BB%83%E4%B9%A0%E4%B8%80/",
            "title": "Java测试",
            "date_published": "2022-01-08T11:39:18.575Z",
            "content_html": "<h1 id=\"练习一\"><a class=\"anchor\" href=\"#练习一\">#</a> 练习一</h1>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StaticStuff</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        x += <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;x = &quot;</span> + StaticStuff.x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        x /= <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>先执行所有的静态代码块，再执行主方法，得到结果 &lt;font color=&quot;red&quot;&gt;x = 5；&lt;/font&gt;</li>\n</ul>\n<hr />\n<ul>\n<li>面向对象开发中，引用传递意味着传递的并不是实际的对象，而是对象的引用，因此，外部对引用对象所做的改变会反映到引用的对象上。</li>\n<li>&lt;font color = &quot;red&quot;&gt;&lt;b&gt;<em>System.out.println();</em>&lt;/b&gt;&lt;/font&gt;  语句中，<strong>System</strong> 是<strong> java.lang</strong> 中的一个类，<strong>out</strong> 为<strong> System</strong> 内的一个静态成员，out 是<strong> java.io.PrintStream</strong> 类的对象，而<strong><em> println ()<em><strong> 是</strong> java.io.PrintStream () 类</em></em>的方法，所有可以调用</strong>类。静态方法.println () 方法 **。</li>\n</ul>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">m</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         result += <span class=\"number\">2</span>;</span><br><span class=\"line\">         data += <span class=\"number\">2</span>;</span><br><span class=\"line\">         System.out.print(result + <span class=\"string\">&quot;  &quot;</span> + data);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadExample</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span></span><br><span class=\"line\"><span class=\"class\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">private</span> Test mv;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadExample</span><span class=\"params\">(Test mv)</span></span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">this</span>.mv = mv;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">synchronized</span>(mv)</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">             mv.m();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span></span><br><span class=\"line\"><span class=\"class\"> </span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span></span><br><span class=\"line\"><span class=\"function\">     </span>&#123;</span><br><span class=\"line\">         Test mv = <span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">         Thread t1 = <span class=\"keyword\">new</span> ThreadExample(mv);</span><br><span class=\"line\">         Thread t2 = <span class=\"keyword\">new</span> ThreadExample(mv);</span><br><span class=\"line\">         Thread t3 = <span class=\"keyword\">new</span> ThreadExample(mv);</span><br><span class=\"line\">         t1.start();</span><br><span class=\"line\">         t2.start();</span><br><span class=\"line\">         t3.start();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><strong>Test mv = new Test();</strong> 声明并初始化对 data 赋默认值。</li>\n<li>使用 &lt;b&gt;synchronized 关键字 &lt;/b &gt; 加同步锁线程依次操作 m ()</li>\n<li><strong>t1.start();</strong> 得到：result = 2; data = 2;  输出 2 2</li>\n<li><strong>t2.start();</strong> 得到：result = 4; data = 4;  输出 4 4</li>\n<li><strong>t3.start();</strong> 得到：result = 6; data = 6;  输出 6 6</li>\n<li>最终结果为：2 24 46 6</li>\n</ul>\n<hr />\n<blockquote>\n<p>&lt;b&gt;byte b = (byte)129;&lt;/b&gt;   //b = -127</p>\n</blockquote>\n<p><strong>Byte 的值范围在 - 128 ~ 127</strong></p>\n<hr />\n<p>监听 TCP 端口 9000，服务器端应该怎样创建 socket？</p>\n<ul>\n<li>ServerSocket (int port)：创建绑定到特定端口的服务器套接字。</li>\n<li>new ServerSocket(9000);</li>\n</ul>\n<hr />\n<p>Java 语言提供了很多修饰符，主要分为以下两类：</p>\n<p>1、访问修饰符</p>\n<p><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</p>\n<p><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></p>\n<p><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</p>\n<p><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</p>\n<p>2、非访问修饰符，包括但不限于：</p>\n<p><strong>static</strong> 修饰符，用来修饰类方法和类变量。</p>\n<p><strong>final</strong> 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>\n<p><strong>abstract</strong> 修饰符，用来创建抽象类和抽象方法。</p>\n<p><strong>synchronized</strong> 和 <strong>volatile</strong> 修饰符，主要用于线程的编程。</p>\n<p>本题应该是想考标识符：</p>\n<p>​    Java 标识符由数字，字母和下划线（_），美元符号（$）或人民币符号（￥）组成。在 Java 中是区分大小写的，而且还要求首位不能是数字。最重要的是，Java<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlODUlQjMlRTklOTQlQUUlRTUlQUQlOTc=\"> 关键字</span>不能当作 Java 标识符。</p>\n<hr />\n<p><strong>JVM</strong> 的垃圾回收算法：复制算法和标记清理算法</p>\n<ul>\n<li>\n<p>&lt;b&gt; 复制算法 &lt;/b&gt;：两个区域 A 和 B，初始对象在 A，继续存活的对象被转移到 B。此为新生代最常用的算法。</p>\n</li>\n<li>\n<p>&lt;b&gt; 标记算法 &lt;/b&gt;：一块区域，标记可达对象（可达性分析），然后回收不可达对象，会出现碎片，那么引出 &lt; b &gt; 标记 - 整理算法 &lt;/b&gt;：多了碎片整理，整理出更大的内存放更大的对象。</p>\n</li>\n<li>\n<p>两个概念：新生代和年老代</p>\n<p>新生代：初始对象，生命周期短的</p>\n<p>永久代：长时间存在的对象</p>\n<p>整个 java 的垃圾回收是新生代和年老代的协作，这种叫做分代回收。</p>\n<p>P.S：<strong>Serial New 收集器是针对新生代的收集器，采用的是复制算法</strong></p>\n<p><strong>Parallel New（并行）收集器，新生代采用复制算法，老年代采用标记整理</strong></p>\n<p><strong>Parallel</strong> <strong>Scavenge（并行）收集器，针对新生代，采用复制收集算法</strong></p>\n<p><strong>Serial Old（串行）收集器，新生代采用复制，老年代采用标记整理</strong></p>\n<p><strong>Parallel</strong> <strong>Old（并行）收集器，针对老年代，标记整理</strong></p>\n<p><strong>CMS 收集器，基于标记清理</strong></p>\n<p><strong>G1 收集器：整体上是基于标记</strong> <strong>整理</strong> <strong>，局部采用复制</strong></p>\n<p><strong>综上：新生代基本采用复制算法，老年代采用标记整理算法。cms 采用标记清理。</strong></p>\n</li>\n</ul>\n",
            "tags": [
                "计算机科学",
                "Java"
            ]
        },
        {
            "id": "http://myblog.com/2022/01/08/computer-network/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",
            "url": "http://myblog.com/2022/01/08/computer-network/OS/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",
            "title": "操作系统",
            "date_published": "2022-01-08T07:56:13.901Z",
            "content_html": "<h1 id=\"操作系统\"><a class=\"anchor\" href=\"#操作系统\">#</a> 操作系统</h1>\n<p><strong>第一章、</strong></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211230202016102.png\" alt=\"image-20211230202016102\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211230202118632.png\" alt=\"image-20211230202118632\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211230202432412.png\" alt=\"image-20211230202432412\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211230203350935.png\" alt=\"image-20211230203350935\" /></p>\n<p><img data-src=\"C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211230203601108.png\" alt=\"image-20211230203601108\" /></p>\n<h2 id=\"4-进程同步练习\"><a class=\"anchor\" href=\"#4-进程同步练习\">#</a> 4、进程同步练习</h2>\n<ul>\n<li>\n<p>如果 3 个进程共享一个互斥段，每次最多可以允许 2 个进程进入互斥段，则信号量的变化范围是 <strong>2、1、0、-1</strong></p>\n</li>\n<li>\n<p>在对记录型信号量的 P 操作的定义中，当信号量的值<strong>小于 0</strong> 时，执行 P 操作的进程变为阻塞状态。</p>\n</li>\n<li>\n<p>若记录型信号量 S 的初值是 3，则当前值为 1 时表示有<strong> 0 个</strong>阻塞等待进程。</p>\n</li>\n<li>\n<p>设与某资源相关联的信号量初值为 3，当前值为 1，若 M 表示该资源的可用个数，N 表示等待资源的进程数，则 M、N 分别是<strong> 1、0</strong></p>\n</li>\n<li>\n<p>两个旅行社甲和乙为旅客到某航空公司订飞机票，形成互斥资源的是<strong>数据</strong></p>\n</li>\n<li>\n<p>从下面对临界区的论述中，选出一条正确的论述。<strong>临界区是指进程中访问临界资源的那段代码</strong>。</p>\n</li>\n<li>\n<p>进程 A 和 B 共享同一临界资源，并且进程 A 正处于对应的临界区内执行。请从下列描述中选择正确的描述。<strong>进程 A 的执行能被中断，而且只要 B 进程就绪，就可以将 CPU 调度给 B 进程。</strong></p>\n</li>\n<li>\n<p>若记录型信号量 S 的初值为 15，当前值为 - 15，则表示有<strong> 15</strong> 个等待进程。</p>\n</li>\n<li>\n<p>在 9 个生产者，5 个消费者，共享容量为 7 的缓冲区的生产者 - 消费者问题中。互斥使用缓冲区的信号量 S 的初值为<strong> 1</strong></p>\n</li>\n<li>\n<p>进程并发地在处理机上执行时，<strong>进程之间可能具有交往，也可能无关</strong></p>\n</li>\n<li>\n<p>在操作系统中，P、V 操作是一种<strong>进程低级通信原语。</strong></p>\n</li>\n<li>\n<p>记录型信号量在使用过程中存在” 忙等 “现象。<strong>对</strong></p>\n</li>\n<li>\n<p>进程的前趋图中的各个结点之间存在同步关系，也存在互斥关系。<strong>对</strong></p>\n</li>\n<li>\n<p>管程是进程的一部分，控制进程的同步与运行。<strong>对</strong></p>\n</li>\n<li>\n<p>对临界资源，应采用互斥访问方式来实现共享。<strong>错</strong></p>\n</li>\n<li>\n<p>临界区是指进程中用于实现进程互斥的那段代码。<strong>对</strong></p>\n</li>\n<li>\n<p>经典的读者 - 写者问题只有进程互斥，不存在进程同步。<strong>错</strong></p>\n</li>\n<li>\n<p>使用 P、V 操作后，可以防止系统出现死锁。<strong>错</strong></p>\n</li>\n<li>\n<p>在利用信号量实现进程互斥时，应将<strong>临界区</strong>置于<strong> P 操作</strong>和<strong> V 操作</strong>之间</p>\n</li>\n<li>\n<p>15 个进程共享同一程序段，而每次最多允许 4 个进程进入该程序段，若用 P、V 操作同步机制，则记录型信号量 S 的取值范围为 **-11 到 4**</p>\n</li>\n<li>\n<p>对每个进程中访问<strong>共享资源</strong>的那段代码称为临界区</p>\n</li>\n<li>\n<p>计算机系统中，一次仅允许一个进程使用的资源，称为<strong>临界资源</strong></p>\n</li>\n</ul>\n",
            "tags": [
                "计算机网络",
                "OS"
            ]
        }
    ]
}